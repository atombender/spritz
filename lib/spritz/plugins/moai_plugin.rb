module Spritz
  module Plugins

    class MoaiPlugin

      def self.add_options(opts, steps)
        opts.on("--moai:quad-decks PATH", String,
          "Generate code to create quads and decks. One MOAIGfxQuadDeck2D is " \
          "created for each base name, with suffix number being the index.") do |v|
          steps.push(MoaiQuadDeckStep.new(v))
        end
      end

      class MoaiQuadDeckStep

        def initialize(path)
          @path = path
          @path = "#{@path}.lua" unless path =~ /\.lua$/
        end

        def call(package)
          grouped, indexes = {}, {}

          package.sheets.each_with_index do |sheet, index|
            sheet.rects.each do |rect|
              if rect.value.file_name =~ /^(.+)\d+.*/
                key = $1.gsub(/\//, '_').gsub(/[_\.\-]+$/, '')
                if indexes.include?(key) and indexes[key] != index
                  abort "Image #{rect.value.file_name} straddles multiple textures. Not supported yet, sorry."
                end
                (grouped[key] ||= []).push(rect)
                indexes[key] = index
              end
            end
          end

          script = []
          script << "-- Generated by Spritz (https://github.com/atombender/spritz)"
          if grouped.any?
            script << ''
            package.sheets.each_with_index do |sheet, index|
              texture_variable = "texture#{index}"
              base_name = "#{package.name}.#{index}"
              script << %{local #{texture_variable} = MOAITexture.new()}
              script << %{#{texture_variable}:load('#{package.file_name_for_format(base_name, package.format)}')}
              script << %{#{texture_variable}:setFilter(MOAITexture.GL_LINEAR, MOAITexture.GL_LINEAR)}
            end
            grouped.each do |key, rects|
              index = indexes[key]
              sheet = package.sheets[index]
              quad_variable = "#{key}_quad"

              script << %{#{quad_variable} = MOAIGfxQuadDeck2D.new()}
              script << %{#{quad_variable}:setTexture(texture#{index})}
              script << %{#{quad_variable}:reserve(#{rects.length})}
              rects.each_with_index do |rect, i|
                box = [-rect.width / 2.0, -rect.height / 2.0, rect.width / 2.0, rect.height / 2.0]

                quad = [
                  rect.x / sheet.width.to_f,
                  rect.y / sheet.height.to_f,

                  (rect.x + rect.width) / sheet.width.to_f,
                  rect.y / sheet.height.to_f,

                  (rect.x + rect.width) / sheet.width.to_f,
                  (rect.y + rect.height) / sheet.height.to_f,

                  rect.x / sheet.width.to_f,
                  (rect.y + rect.height) / sheet.height.to_f,
                ]

                script << %{#{quad_variable}:setRect(#{i + 1}, #{box.join(', ')})}
                script << %{#{quad_variable}:setUVQuad(#{i + 1}, #{quad.join(', ')})}
              end
            end
          else
            script << "-- No images"
          end

          Logger.log_write(@path) do |path|
            File.open(path, 'w') do |f|
              f.write script.join("\n")
              f.write "\n"
            end
          end
        end

      end

    end
  end
end